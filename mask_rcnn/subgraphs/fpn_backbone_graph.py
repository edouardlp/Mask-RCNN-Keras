import keras

class BackboneGraph():

    def __init__(self, input_tensor, architecture, pyramid_size):
        self.input_tensor = input_tensor
        self.architecture = architecture
        self.pyramid_size = pyramid_size

    def build(self):

        #TODO: support mobile graph here

        C1, C2, C3, C4, C5 = resnet_graph(self.input_tensor, architecture=self.architecture, stage5=True, train_bn=False)

        P5 = keras.layers.Conv2D(self.pyramid_size, (1, 1), name='fpn_c5p5')(C5)

        P4 = keras.layers.Add(name="fpn_p4add")([
            keras.layers.UpSampling2D(size=(2, 2), name="fpn_p5upsampled")(P5),
            keras.layers.Conv2D(self.pyramid_size, (1, 1), name='fpn_c4p4')(C4)])

        P3 = keras.layers.Add(name="fpn_p3add")([
            keras.layers.UpSampling2D(size=(2, 2), name="fpn_p4upsampled")(P4),
            keras.layers.Conv2D(self.pyramid_size, (1, 1), name='fpn_c3p3')(C3)])

        P2 = keras.layers.Add(name="fpn_p2add")([
            keras.layers.UpSampling2D(size=(2, 2), name="fpn_p3upsampled")(P3),
            keras.layers.Conv2D(self.pyramid_size, (1, 1), name='fpn_c2p2')(C2)])

        # Attach 3x3 conv to all P layers to get the final feature maps.

        P2 = keras.layers.Conv2D(self.pyramid_size, (3, 3), padding="SAME", name="fpn_p2")(P2)
        P3 = keras.layers.Conv2D(self.pyramid_size, (3, 3), padding="SAME", name="fpn_p3")(P3)
        P4 = keras.layers.Conv2D(self.pyramid_size, (3, 3), padding="SAME", name="fpn_p4")(P4)
        P5 = keras.layers.Conv2D(self.pyramid_size, (3, 3), padding="SAME", name="fpn_p5")(P5)

        # P6 is used for the 5th anchor scale in RPN. Generated by
        # subsampling from P5 with stride of 2.
        P6 = keras.layers.MaxPooling2D(pool_size=(1, 1), strides=2, name="fpn_p6")(P5)

        return [P2,P3,P4,P5,P6]


def identity_block(input_tensor, kernel_size, filters, stage, block,
                   use_bias=True, train_bn=True):
    """The identity_block is the block that has no conv layer at shortcut
    # Arguments
        input_tensor: input tensor
        kernel_size: default 3, the kernel size of middle conv layer at main path
        filters: list of integers, the nb_filters of 3 conv layer at main path
        stage: integer, current stage label, used for generating layer names
        block: 'a','b'..., current block label, used for generating layer names
        use_bias: Boolean. To use or not use a bias in conv layers.
        train_bn: Boolean. Train or freeze Batch Norm layers
    """
    nb_filter1, nb_filter2, nb_filter3 = filters
    conv_name_base = 'res' + str(stage) + block + '_branch'
    bn_name_base = 'bn' + str(stage) + block + '_branch'

    x = keras.layers.Conv2D(nb_filter1, (1, 1), name=conv_name_base + '2a',
                  use_bias=use_bias)(input_tensor)
    x = keras.layers.BatchNormalization(name=bn_name_base + '2a')(x, training=train_bn)
    x = keras.layers.Activation('relu')(x)

    x = keras.layers.Conv2D(nb_filter2, (kernel_size, kernel_size), padding='same',
                  name=conv_name_base + '2b', use_bias=use_bias)(x)
    x = keras.layers.BatchNormalization(name=bn_name_base + '2b')(x, training=train_bn)
    x = keras.layers.Activation('relu')(x)

    x = keras.layers.Conv2D(nb_filter3, (1, 1), name=conv_name_base + '2c',
                  use_bias=use_bias)(x)
    x = keras.layers.BatchNormalization(name=bn_name_base + '2c')(x, training=train_bn)

    x = keras.layers.Add()([x, input_tensor])
    x = keras.layers.Activation('relu', name='res' + str(stage) + block + '_out')(x)
    return x


def conv_block(input_tensor, kernel_size, filters, stage, block,
               strides=(2, 2), use_bias=True, train_bn=True):
    """conv_block is the block that has a conv layer at shortcut
    # Arguments
        input_tensor: input tensor
        kernel_size: default 3, the kernel size of middle conv layer at main path
        filters: list of integers, the nb_filters of 3 conv layer at main path
        stage: integer, current stage label, used for generating layer names
        block: 'a','b'..., current block label, used for generating layer names
        use_bias: Boolean. To use or not use a bias in conv layers.
        train_bn: Boolean. Train or freeze Batch Norm layers
    Note that from stage 3, the first conv layer at main path is with subsample=(2,2)
    And the shortcut should have subsample=(2,2) as well
    """
    nb_filter1, nb_filter2, nb_filter3 = filters
    conv_name_base = 'res' + str(stage) + block + '_branch'
    bn_name_base = 'bn' + str(stage) + block + '_branch'

    x = keras.layers.Conv2D(nb_filter1, (1, 1), strides=strides,
                  name=conv_name_base + '2a', use_bias=use_bias)(input_tensor)
    x = keras.layers.BatchNormalization(name=bn_name_base + '2a')(x, training=train_bn)
    x = keras.layers.Activation('relu')(x)

    x = keras.layers.Conv2D(nb_filter2, (kernel_size, kernel_size), padding='same',
                  name=conv_name_base + '2b', use_bias=use_bias)(x)
    x = keras.layers.BatchNormalization(name=bn_name_base + '2b')(x, training=train_bn)
    x = keras.layers.Activation('relu')(x)

    x = keras.layers.Conv2D(nb_filter3, (1, 1), name=conv_name_base +
                  '2c', use_bias=use_bias)(x)
    x = keras.layers.BatchNormalization(name=bn_name_base + '2c')(x, training=train_bn)

    shortcut = keras.layers.Conv2D(nb_filter3, (1, 1), strides=strides,
                         name=conv_name_base + '1', use_bias=use_bias)(input_tensor)
    shortcut = keras.layers.BatchNormalization(name=bn_name_base + '1')(shortcut, training=train_bn)

    x = keras.layers.Add()([x, shortcut])
    x = keras.layers.Activation('relu', name='res' + str(stage) + block + '_out')(x)
    return x


def resnet_graph(input_image, architecture, stage5=False, train_bn=True):
    """Build a ResNet graph.
        architecture: Can be resnet50 or resnet101
        stage5: Boolean. If False, stage5 of the network is not created
        train_bn: Boolean. Train or freeze Batch Norm layers
    """
    assert architecture in ["resnet50", "resnet101"]
    # Stage 1
    x = keras.layers.ZeroPadding2D((3, 3))(input_image)
    x = keras.layers.Conv2D(64, (7, 7), strides=(2, 2), name='conv1', use_bias=True)(x)
    x = keras.layers.BatchNormalization(name='bn_conv1')(x, training=train_bn)
    x = keras.layers.Activation('relu')(x)
    C1 = x = keras.layers.MaxPooling2D((3, 3), strides=(2, 2), padding="same")(x)
    # Stage 2
    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1), train_bn=train_bn)
    x = identity_block(x, 3, [64, 64, 256], stage=2, block='b', train_bn=train_bn)
    C2 = x = identity_block(x, 3, [64, 64, 256], stage=2, block='c', train_bn=train_bn)
    # Stage 3
    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a', train_bn=train_bn)
    x = identity_block(x, 3, [128, 128, 512], stage=3, block='b', train_bn=train_bn)
    x = identity_block(x, 3, [128, 128, 512], stage=3, block='c', train_bn=train_bn)
    C3 = x = identity_block(x, 3, [128, 128, 512], stage=3, block='d', train_bn=train_bn)
    # Stage 4
    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a', train_bn=train_bn)
    block_count = {"resnet50": 5, "resnet101": 22}[architecture]
    for i in range(block_count):
        x = identity_block(x, 3, [256, 256, 1024], stage=4, block=chr(98 + i), train_bn=train_bn)
    C4 = x
    # Stage 5
    if stage5:
        x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a', train_bn=train_bn)
        x = identity_block(x, 3, [512, 512, 2048], stage=5, block='b', train_bn=train_bn)
        C5 = x = identity_block(x, 3, [512, 512, 2048], stage=5, block='c', train_bn=train_bn)
    else:
        C5 = None
    return [C1, C2, C3, C4, C5]